def get_type_of_chats(client, selection):
    """Функция для подсчета количества сообщений в чатах и определения типов чатов."""
    chat_message_counts = {}
    openchannels = []
    closechannels = []
    openchats = []
    closechats = []

    count_messages = 0
    deactivated_chats = []
    all_chats_ids = []
    closechats_deleted = []
    chats = client.get_dialogs()
   
    for chat in chats:
      
        if isinstance(chat.entity, Channel) or isinstance(chat.entity, Chat): # проверяем групповой ли чат
            
            if selection == '7': #выгружаем количество сообщений при функции выгрузить сообщение
                messages = client.get_messages(chat.entity, limit=0)
                count_messages = messages.total
                chat_message_counts[chat.entity.id] = count_messages

            # Определяем открытый канал
            if isinstance(chat.entity, Channel) and hasattr(chat.entity, 'broadcast') and chat.entity.participants_count is not None:
                if chat.entity.broadcast and chat.entity.username:
                    openchannels.append(chat.entity)
                    all_chats_ids.append(chat.entity.id)

            # Определяем закрытый канал
            if isinstance(chat.entity, Channel) and hasattr(chat.entity, 'broadcast'):
                if chat.entity.broadcast and chat.entity.username is None and chat.entity.title != 'Unsupported Chat':
                    closechannels.append(chat.entity)
                    all_chats_ids.append(chat.entity.id)

            # Определяем открытый чат
            if isinstance(chat.entity, Channel) and hasattr(chat.entity, 'broadcast'):
                if not chat.entity.broadcast and chat.entity.username:
                    openchats.append(chat.entity)
                    all_chats_ids.append(chat.entity.id)

            # Определяем закрытый чат
            if isinstance(chat.entity, Channel) and hasattr(chat.entity, 'broadcast'):
               if chat.entity.broadcast == False and chat.entity.username == None:
                  closechats.append(chat.entity)
                  all_chats_ids.append(chat.entity.id)
            if isinstance(chat.entity, Chat) and chat.entity.migrated_to is None:
               closechats.append(chat.entity)
               all_chats_ids.append(chat.entity.id)

            if isinstance(chat.entity, Chat) and hasattr(chat.entity, 'participants_count') and chat.entity.participants_count == 0:
               if chat.entity.migrated_to is not None and isinstance(chat.entity.migrated_to, InputChannel):
                  deactivated_chats_all = {
                     'ID_migrated': chat.entity.migrated_to.channel_id,
                     'ID': chat.entity.id,
                     'title': chat.entity.title,
                     'creator': chat.entity.creator,
                     'admin_rights': chat.entity.admin_rights,
                  }
                  deactivated_chats.append(deactivated_chats_all)
   
                       

    if selection == '5': #Добавляем нулевые чаты для общей информации
       if isinstance(chat.entity, Channel) or isinstance(chat.entity, Chat): # проверяем групповой ли чат
          for current_deleted_chat in deactivated_chats:
                  ID_migrated_values = current_deleted_chat['ID_migrated']
                              
                  if ID_migrated_values not in all_chats_ids:
                      
                    #  if isinstance(chat.entity, Chat) and hasattr(chat.entity, 'participants_count') and chat.entity.participants_count == 0:
                      closechats_deleted.append(deactivated_chats)
                      print(closechats_deleted) 
                      input("closechats_deleted") 


    delgroups = closechats_deleted
    print(delgroups) 
    input("delgroups") 
