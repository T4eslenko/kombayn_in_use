
    chats = client.get_dialogs()
    for chat in chats:
        count_messages = 0
        if isinstance(chat.entity, Channel) or isinstance(chat.entity, Chat): # проверяем групповой ли чат
            if selection == '7': #выгружаем количество сообщений при функции выгрузить сообщение
                messages = client.get_messages(chat.entity, limit=0)
                count_messages = messages.total

                # Добавляем количество сообщений в словарь, где ключ - ID чата
                chat_message_counts[chat.entity.id] = count_messages


            # Определяем открытый канал
            if isinstance(chat.entity, Channel) and hasattr(chat.entity, 'broadcast') and chat.entity.participants_count is not None:
                if chat.entity.broadcast and chat.entity.username:
                    openchannels.append(chat.entity)

            # Определяем закрытый канал
            if isinstance(chat.entity, Channel) and hasattr(chat.entity, 'broadcast'):
                if chat.entity.broadcast and chat.entity.username is None and chat.entity.title != 'Unsupported Chat':
                    closechannels.append(chat.entity)

            # Определяем открытый чат
            if isinstance(chat.entity, Channel) and hasattr(chat.entity, 'broadcast'):
                if not chat.entity.broadcast and chat.entity.username:
                    openchats.append(chat.entity)

            # Определяем закрытый чат
            if isinstance(chat.entity, Channel) and hasattr(chat.entity, 'broadcast'):
                if not chat.entity.broadcast and chat.entity.username is None:
                    closechats.append(chat.entity)
            if isinstance(chat.entity, Chat) and chat.entity.migrated_to is None:
                closechats.append(chat.entity)
            if selection == '5': #Добавляем нулевые чаты для общей информации
               if isinstance(chat.entity, Chat) and hasattr(chat.entity, 'participants_count') and chat.entity.participants_count == 0:
                  if isinstance(dialog.entity.migrated_to, InputChannel):
                     migrated_channel_id = dialog.entity.migrated_to.channel_id
                     # Проверка, упоминается ли channel_id в других диалогах
                     if migrated_channel_id not in mentioned_channels:
                         # Если нет, добавляем текущий диалог в список closechats
                         closechats.append(dialog.entity)
                     mentioned_channels.append(migrated_channel_id)
